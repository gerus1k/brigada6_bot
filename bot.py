import telebot
import requests
import random

from telebot import types
from googletrans import Translator

# utils

bot = telebot.TeleBot('6022109518:AAHgixLTjERH8Caogmg_lsz1v2y5D38iNIg')
translator = Translator()
weather_api_key = 'abc243dccda528959fc3d2dd6f8ab61a'
meme_api_url = "https://programming-memes-images.p.rapidapi.com/v1/memes?rapidapi-key" \
               "=1db773f93dmsh3e0725f197b19f6p19106bjsn5b1f8177ea85"

# global var's

language = None
city = None
state = None
text = None

# keyboard button sets

lang_keyboard = types.ReplyKeyboardMarkup()
ru_lang = types.KeyboardButton('üá∑üá∫–†—É—Å—Å–∫–∏–π')
en_lang = types.KeyboardButton('üá¨üáßEnglish')
lang_keyboard.add(ru_lang, en_lang)

menu_keyboard_ru = types.ReplyKeyboardMarkup(row_width=2)
trans_ru = types.KeyboardButton('üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫')
calc_ru = types.KeyboardButton('üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')
weather_ru = types.KeyboardButton('üå°Ô∏è –ü–æ–≥–æ–¥–∞')
meme_ru = types.KeyboardButton('üóø IT –º–µ–º –¥–Ω—è')
settings_ru = types.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞')
menu_keyboard_ru.add(trans_ru, calc_ru, weather_ru, meme_ru, settings_ru)

menu_keyboard_en = types.ReplyKeyboardMarkup(row_width=2)
translator_en = types.KeyboardButton('üåê Translator')
calc_en = types.KeyboardButton('üßÆ Calculator')
weather_en = types.KeyboardButton('üå°Ô∏è Weather')
meme_en = types.KeyboardButton('üóø IT-meme of the day')
settings_en = types.KeyboardButton('üîô Get back to language select')
menu_keyboard_en.add(translator_en, calc_en, weather_en, meme_en, settings_en)

in_keyboard_ru = types.ReplyKeyboardMarkup(row_width=2)
back_to_menu_ru = types.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
in_keyboard_ru.add(back_to_menu_ru)

in_keyboard_en = types.ReplyKeyboardMarkup(row_width=2)
back_to_menu_en = types.KeyboardButton('üîô Get back to menu')
in_keyboard_en.add(back_to_menu_en)


# language select after /start cmd
@bot.message_handler(commands=['start'])
def start(message):

    bot.send_message(message.chat.id, '‚úãüòÉ–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:', reply_markup=lang_keyboard)


# bot main
@bot.message_handler(content_types=['text'])
def main(message):

    global language, city, state, text
    # language selection
    if message.text == 'üá∑üá∫–†—É—Å—Å–∫–∏–π':
        state = 'ru_menu'
        language = 'ru'
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é: ', reply_markup=menu_keyboard_ru)
        state = None
    elif message.text == 'üá¨üáßEnglish':
        state = 'en_menu'
        language = 'en'
        bot.send_message(message.chat.id, 'Choose function: ', reply_markup=menu_keyboard_en)
        state = None

    # it meme of the day

    elif 'üóø' in message.text:
        state = 'meme'
        try:
            response = requests.get(meme_api_url).json()
            if response and isinstance(response, list) and len(response) > 0:
                images = [mem.get("image") for mem in response]
                random_image = random.choice(images)
                bot.send_photo(message.chat.id, random_image)
            elif language == 'ru':
                bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IT-–º–µ–º –¥–Ω—è.')
            elif language == 'en':
                bot.send_message(message.chat.id, "Couldn't get It meme of the day.")
        except Exception as e:
            bot.send_message(message.chat.id, f'Error: {str(e)}')
        state = None

    # choosing a city

    elif 'üå°Ô∏è' in message.text:
        state = 'weather'
        if language == 'en':
            bot.send_message(message.chat.id, 'üèôÔ∏è Select a city :', reply_markup=in_keyboard_en)

        elif language == 'ru':
            bot.send_message(message.chat.id, 'üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ :', reply_markup=in_keyboard_ru)

    # weather conditions

    elif state == 'weather' and type(message.text) is str:
        city = message.text
        try:
            url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={weather_api_key}&units=metric'
            response = requests.get(url).json()
            if response['cod'] == 200:
                weather_data = response['weather'][0]
                conditions = weather_data['main']
                conditions_ru = translator.translate(conditions, dest='ru')
                description = weather_data['description']
                description_ru = translator.translate(description, dest='ru')
                temperature = response['main']['temp']
                humidity = response['main']['humidity']
                wind_speed = response['wind']['speed']
                if language == 'ru':
                    bot.send_message(message.chat.id, f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n'
                                                      f'–û—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {conditions_ru.text}\n'
                                                      f'–û–ø–∏—Å–∞–Ω–∏–µ: {description_ru.text}\n'
                                                      f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n'
                                                      f'–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n'
                                                      f'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å')
                elif language == 'en':
                    bot.send_message(message.chat.id, f'Weather in {city}:\n'
                                                      f'Main conditions: {conditions}\n'
                                                      f'Description: {description}\n'
                                                      f'Temperature: {temperature}¬∞C\n'
                                                      f'Humidity: {humidity}%\n'
                                                      f'Wind speed: {wind_speed} –º/—Å')
            elif language == 'ru':
                bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.')
            elif language == 'en':
                bot.send_message(message.chat.id, "Couldn't get data for this city.")
        except Exception as e:
            bot.send_message(message.chat.id, f'Error: {str(e)}')
        state = None

    # entering the text

    elif 'üåê' in message.text:
        state = 'trans'
        if language == 'en':
            bot.send_message(message.chat.id, 'üî† Enter the text for translation:', reply_markup=in_keyboard_en)
        elif language == 'ru':
            bot.send_message(message.chat.id, 'üî†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ :', reply_markup=in_keyboard_ru)

    # translator

    elif state == 'trans' and type(message.text) is str:
        text = message.text
        try:
            detected_lang = translator.detect(text).lang
            if detected_lang == 'ru':
                translation = translator.translate(text, dest='en')
                if language == 'en':
                    bot.send_message(message.chat.id, f'Translation to English: {translation.text}')
                elif language == 'ru':
                    bot.send_message(message.chat.id, f'–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: {translation.text}')
            else:
                translation = translator.translate(text, dest='ru')
                if language == 'en':
                    bot.send_message(message.chat.id, f'Translation to Russian: {translation.text}')
                elif language == 'ru':
                    bot.send_message(message.chat.id, f'–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π: {translation.text}')
        except AttributeError:
            if language == 'en':
                bot.send_message(message.chat.id, "Couldn't recognize the text language. Please try again.")
            elif language == 'ru':
                bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        except Exception as e:
            bot.send_message(message.chat.id, f'Error: {str(e)}')
        state = None

    # enter expression

    elif 'üßÆ' in message.text:
        state = 'calc'
        if language == 'en':
            bot.send_message(message.chat.id, 'üî¢ Enter the expression :', reply_markup=in_keyboard_en)
        elif language == 'ru':
            bot.send_message(message.chat.id, 'üî¢ –í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ :', reply_markup=in_keyboard_ru)

    # calculator

    elif state == 'calc':
        expression = message.text
        try:
            result = eval(expression)
            if language == 'en':
                bot.send_message(message.chat.id, f'Result : {result}')
            elif language == 'ru':
                bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç : {result}')
        except Exception as e:
            bot.send_message(message.chat.id, f'Error : {str(e)}')


bot.polling(none_stop=True, interval=0)
