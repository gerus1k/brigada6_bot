import telebot
import googletrans
import requests
import random

from telebot import types
from googletrans import Translator

bot = telebot.TeleBot('6022109518:AAHgixLTjERH8Caogmg_lsz1v2y5D38iNIg')
translator = Translator()
weather_api_key = 'abc243dccda528959fc3d2dd6f8ab61a'
meme_api_url = "https://programming-memes-images.p.rapidapi.com/v1/memes?rapidapi-key=1db773f93dmsh3e0725f197b19f6p19106bjsn5b1f8177ea85"

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π —Å–µ–π—á–∞—Å –ø–æ–ª—å–∑—É–µ—Ç—Å—è)
user_states = {}

# –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    russian_button = types.InlineKeyboardButton('üá∑üá∫–†—É—Å—Å–∫–∏–π', callback_data='ru')
    english_button = types.InlineKeyboardButton('üá¨üáßEnglish', callback_data='en')
    markup.add(russian_button, english_button)

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == 'translator')
def translator_callback(call):
    user_states[call.from_user.id] = 'translator'
    bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–ù–ï –†–ê–ë–û–¢–ê–ï–¢)) )
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'translator')
def translate_text(message):
    text = message.text
    try:
        detected_lang = translator.detect(text).lang
        if detected_lang == 'ru':
            translation = translator.translate(text, dest='en')
            bot.send_message(message.chat.id, f'–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: {translation.text}')
        else:
            translation = translator.translate(text, dest='ru')
            bot.send_message(message.chat.id, f'–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π: {translation.text}')
    except AttributeError:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')

    user_states[message.from_user.id] = None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data == 'calculator')
def calculator_callback(call):
    user_states[call.from_user.id] = 'calculator'  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è:')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'calculator')
def calculate_expression(message):
    expression = message.text
    try:
        result = eval(expression)
        bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}')
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: {str(e)}')

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_states[message.from_user.id] = None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–≥–æ–¥—ã
@bot.callback_query_handler(func=lambda call: call.data == 'weather')
def weather_callback(call):
    user_states[call.from_user.id] = 'weather'
    bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏ –≤—ã–≤–æ–¥ –ø–æ–≥–æ–¥—ã
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'weather')
def get_weather(message):
    city = message.text
    try:
        url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={weather_api_key}&units=metric'
        response = requests.get(url).json()
        if response['cod'] == 200:
            weather_data = response['weather'][0]
            main = weather_data['main']
            description = weather_data['description']
            temperature = response['main']['temp']
            humidity = response['main']['humidity']
            wind_speed = response['wind']['speed']
            bot.send_message(message.chat.id, f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n'
                                              f'–û—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {main}\n'
                                              f'–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n'
                                              f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n'
                                              f'–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n'
                                              f'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å')
        else:
            bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.')
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')

    user_states[message.from_user.id] = None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ IT-–º–µ–º—á–∏–∫ –¥–Ω—è
@bot.callback_query_handler(func=lambda call: call.data == 'meme')
def meme_callback(call):
    try:
        response = requests.get(meme_api_url).json()
        if response and isinstance(response, list) and len(response) > 0:
            images = [mem.get("image") for mem in response]
            random_image = random.choice(images)
            bot.send_photo(call.message.chat.id, random_image)
        else:
            bot.send_message(call.message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IT-–º–µ–º –¥–Ω—è.')
    except Exception as e:
        bot.send_message(call.message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')

# –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
@bot.callback_query_handler(func=lambda call: True)
def button(call):
    language = call.data

    if language == 'ru':
        markup = types.InlineKeyboardMarkup(row_width=2)
        translator_button = types.InlineKeyboardButton('üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫', callback_data='translator')
        calculator_button = types.InlineKeyboardButton('üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', callback_data='calculator')
        weather_button = types.InlineKeyboardButton('üå°Ô∏è –ü–æ–≥–æ–¥–∞', callback_data='weather')
        meme_button = types.InlineKeyboardButton('üóø IT –º–µ–º –¥–Ω—è', callback_data='meme')
        lang_select_button = types.InlineKeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞', callback_data='lang_select')
        markup.add(translator_button, calculator_button, weather_button, meme_button, lang_select_button)

        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:', reply_markup=markup)
    elif language == 'en':
        markup = types.InlineKeyboardMarkup(row_width=2)
        translator_button = types.InlineKeyboardButton('üåê Translator', callback_data='translator')
        calculator_button = types.InlineKeyboardButton('üßÆ Calculator', callback_data='calculator')
        weather_button = types.InlineKeyboardButton('üå°Ô∏è Weather', callback_data='weather')
        meme_button = types.InlineKeyboardButton('üóø IT-meme of the day', callback_data='meme')
        lang_select_button = types.InlineKeyboardButton('üîô Get back to language select', callback_data='lang_select')
        markup.add(translator_button, calculator_button, weather_button, meme_button, lang_select_button)

        bot.send_message(call.message.chat.id, 'Select function:', reply_markup=markup)

    bot.answer_callback_query(call.id)

bot.polling(none_stop=True, interval=0)