import telebot
import requests
import random

from telebot import types
from googletrans import Translator

bot = telebot.TeleBot('6022109518:AAHgixLTjERH8Caogmg_lsz1v2y5D38iNIg')
translator = Translator()
weather_api_key = 'abc243dccda528959fc3d2dd6f8ab61a'
meme_api_url = "https://programming-memes-images.p.rapidapi.com/v1/memes?rapidapi-key=1db773f93dmsh3e0725f197b19f6p19106bjsn5b1f8177ea85"

language = None
city = None
state = None
text = None


# language select after /start cmd
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup()
    btn1 = types.KeyboardButton('üá∑üá∫–†—É—Å—Å–∫–∏–π')
    btn2 = types.KeyboardButton('üá¨üáßEnglish')
    markup.add(btn1, btn2)

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:', reply_markup=markup)


# bot main
@bot.message_handler(content_types=['text'])
def main(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    global language, city, state, text
    # language selection
    if message.text == 'üá∑üá∫–†—É—Å—Å–∫–∏–π':
        state = 'ru_menu'
        language = 'ru'

        btn1 = types.KeyboardButton('üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫')
        btn2 = types.KeyboardButton('üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')
        btn3 = types.KeyboardButton('üå°Ô∏è –ü–æ–≥–æ–¥–∞')
        btn4 = types.KeyboardButton('üóø IT –º–µ–º –¥–Ω—è')
        btn5 = types.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞')
        markup.add(btn1, btn2, btn3, btn4, btn5)

        bot.send_message(message.chat.id, '<pre>    –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:</pre>', parse_mode='html', reply_markup=markup)
        state = None
    elif message.text == 'üá¨üáßEnglish':
        state = 'en_menu'
        language = 'en'

        translator_button = types.KeyboardButton('üåê Translator')
        calculator_button = types.KeyboardButton('üßÆ Calculator')
        weather_button = types.KeyboardButton('üå°Ô∏è Weather')
        meme_button = types.KeyboardButton('üóø IT-meme of the day')
        lang_select_button = types.KeyboardButton('üîô Get back to language select')
        markup.add(translator_button, calculator_button, weather_button, meme_button, lang_select_button)

        bot.send_message(message.chat.id, '<pre>    Choose function:</pre>', parse_mode='html', reply_markup=markup)
        state = None
    elif 'üóø' in message.text:
        state = 'meme'
        try:
            response = requests.get(meme_api_url).json()
            if response and isinstance(response, list) and len(response) > 0:
                images = [mem.get("image") for mem in response]
                random_image = random.choice(images)
                bot.send_photo(message.chat.id, random_image)
            elif language == 'ru':
                bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IT-–º–µ–º –¥–Ω—è :(.')
            elif language == 'en':
                bot.send_message(message.chat.id, "Couldn't get It mem of the day :(.")
        except Exception as e:
            bot.send_message(message.chat.id, f'Error: {str(e)}')
        state = None
    elif 'üå°Ô∏è' in message.text:
        state = 'weather'
        bot.send_message(message.chat.id, 'Select city')
    elif state == 'weather' and type(message.text) is str:
        city = message.text
        try:
            url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={weather_api_key}&units=metric'
            response = requests.get(url).json()
            if response['cod'] == 200:
                weather_data = response['weather'][0]
                main = weather_data['main']
                description = weather_data['description']
                temperature = response['main']['temp']
                humidity = response['main']['humidity']
                wind_speed = response['wind']['speed']
                bot.send_message(message.chat.id, f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n'
                                                  f'–û—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {main}\n'
                                                  f'–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n'
                                                  f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n'
                                                  f'–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n'
                                                  f'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å')
            else:
                bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.')
        except Exception as e:
            bot.send_message(message.chat.id, f'Error: {str(e)}')
        state = None
    elif 'üåê' in message.text:
        state = 'trans'
        bot.send_message(message.chat.id, 'Enter the text :')
    elif state == 'trans' and type(message.text) is str:
        text = message.text
        try:
            detected_lang = translator.detect(text).lang
            if detected_lang == 'ru':
                translation = translator.translate(text, dest='en')
                bot.send_message(message.chat.id, f'–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: {translation.text}')
            else:
                translation = translator.translate(text, dest='ru')
                bot.send_message(message.chat.id, f'–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π: {translation.text}')
        except AttributeError:
            bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        except Exception as e:
            bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')
        state = None
    elif 'üßÆ' in message.text:
        state = 'calc'
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è:')
    elif state == 'calc':
        expression = message.text
        try:
            result = eval(expression)
            bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}')
        except Exception as e:
            bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: {str(e)}')


bot.polling(none_stop=True, interval=0)
